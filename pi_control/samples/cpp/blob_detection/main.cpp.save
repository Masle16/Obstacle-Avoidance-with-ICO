#include <ctime>
#include <fstream>
#include <iostream>
#include <chrono>
#include <thread>
#include <raspicam/raspicam.h>
#include <unistd.h>

#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/features2d.hpp>

using namespace std;
//using namespace cv;

int main (int argc, char** argv)
{
	// Create Raspberry Pi camera object
	raspicam::RaspiCam Camera;
	cv::SimpleBlobDetector BlobDetector;

	//  Get camera parameters
        cout << "Format: " << Camera.getFormat() << endl;
        cout << "Width: " << Camera.getWidth() << endl;
        cout << "Height: " << Camera.getHeight() << endl;
        cout << "Brightness: " << Camera.getBrightness() << endl;
        cout << "Rotation: " << Camera.getRotation() << endl;
        cout << "ISO: " << Camera.getISO() << endl;
        cout << "Sharrpness: " << Camera.getSharpness() << endl;
        cout << "Contrast: " << Camera.getContrast() << endl;
        cout << "Saturation: " << Camera.getSaturation() << endl;
        cout << "ShutterSpeed: " << Camera.getShutterSpeed() << endl;
        cout << "Exopsure: " << Camera.getExposure() << endl;
        cout << "AWB: " << Camera.getAWB() << endl;
        cout << "Image effect: " << Camera.getImageEffect() << endl;
        cout << "Metering: " << Camera.getMetering() << endl;
	cout << "Format:" << Camera.getFormat();

	// Set camera image format to BGR as used by OpenCV
	Camera.setFormat(raspicam::RASPICAM_FORMAT_BGR);

	cout << "...changed to 2 (BGR)" << endl;

	// Open camera
	if (!Camera.open())
	{
		cerr << "Error opening camera." << endl;
		return -1;
	}

	// Wait 3 seconds for camera i
	cout << "Waiting for camera stmage to abilisation...";
	usleep(3000000);
	cout << "done" << endl;

	Camera.grab();

	int img_buf_len = Camera.getImageTypeSize(raspicam::RASPICAM_FORMAT_BGR);
	unsigned char *img_buf=new unsigned char[img_buf_len];

	Camera.retrieve(img_buf);

	cv::Mat imageMat = cv::Mat(Camera.getHeight(),Camera.getWidth(),CV_8UC3,img_buf);

	if (!imageMat.data)
	{
		cout << "No data in Mat imageMat." << endl;
		return -1;
	}

	cv::namedWindow("Raspicam image",cv::WINDOW_AUTOSIZE);
	cv::imshow("Raspicam image", imageMat);
	cv::waitKey(0);

	Camera.release();

	return 0;
}
